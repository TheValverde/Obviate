"""Initial schema

Revision ID: 65ce37c43657
Revises: 
Create Date: 2025-08-22 22:33:43.248870

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '65ce37c43657'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_events',
    sa.Column('entity_type', sa.String(length=50), nullable=False, comment='Type of entity: board|column|card|comment|attachment'),
    sa.Column('entity_id', sa.String(length=26), nullable=False, comment='ID of the affected entity'),
    sa.Column('action', sa.String(length=50), nullable=False, comment='Action performed: create|update|delete|move|reorder|archive|restore'),
    sa.Column('actor', sa.String(length=100), nullable=False, comment='Service/agent identifier that performed the action'),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Diff or snapshot of the change (sized to keep <8KB)'),
    sa.Column('agent_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Agent reasoning: reasoning, confidence, alternative_actions, user_approval_required'),
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last update timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_events_entity_id'), 'audit_events', ['entity_id'], unique=False)
    op.create_index(op.f('ix_audit_events_entity_type'), 'audit_events', ['entity_type'], unique=False)
    op.create_index(op.f('ix_audit_events_id'), 'audit_events', ['id'], unique=False)
    op.create_index(op.f('ix_audit_events_tenant_id'), 'audit_events', ['tenant_id'], unique=False)
    op.create_table('service_tokens',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Human-readable token name'),
    sa.Column('token_hash', sa.String(length=255), nullable=False, comment='Argon2id hash of the token (never store actual tokens)'),
    sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='List of scopes: read, write, admin'),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True, comment='Revocation timestamp (UTC), null if active'),
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last update timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token_hash')
    )
    op.create_index(op.f('ix_service_tokens_id'), 'service_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_service_tokens_tenant_id'), 'service_tokens', ['tenant_id'], unique=False)
    op.create_table('workspaces',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Workspace display name'),
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last update timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workspaces_id'), 'workspaces', ['id'], unique=False)
    op.create_index(op.f('ix_workspaces_tenant_id'), 'workspaces', ['tenant_id'], unique=False)
    op.create_table('boards',
    sa.Column('workspace_id', sa.String(length=26), nullable=True, comment='Reference to workspace (optional for MVP)'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Board display name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Board description'),
    sa.Column('is_archived', sa.Boolean(), nullable=False, comment='Whether the board is archived'),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Custom metadata for board-level configuration'),
    sa.Column('template', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Board template with default columns, labels, priorities'),
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last update timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_boards_id'), 'boards', ['id'], unique=False)
    op.create_index(op.f('ix_boards_tenant_id'), 'boards', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_boards_workspace_id'), 'boards', ['workspace_id'], unique=False)
    op.create_table('columns',
    sa.Column('board_id', sa.String(length=26), nullable=False, comment='Reference to parent board'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Column display name'),
    sa.Column('position', sa.Integer(), nullable=False, comment='Position within board (gaps ok, rebalance on large diffs)'),
    sa.Column('wip_limit', sa.Integer(), nullable=True, comment='Work-in-progress limit (null for unlimited)'),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Custom metadata for column configuration'),
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last update timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_columns_board_id'), 'columns', ['board_id'], unique=False)
    op.create_index(op.f('ix_columns_id'), 'columns', ['id'], unique=False)
    op.create_index(op.f('ix_columns_tenant_id'), 'columns', ['tenant_id'], unique=False)
    op.create_table('cards',
    sa.Column('board_id', sa.String(length=26), nullable=False, comment='Reference to parent board'),
    sa.Column('column_id', sa.String(length=26), nullable=False, comment='Reference to current column'),
    sa.Column('title', sa.String(length=256), nullable=False, comment='Card title'),
    sa.Column('description', sa.Text(), nullable=True, comment='Card description (limited to 16KB as per README)'),
    sa.Column('assignees', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of agent/human identifiers'),
    sa.Column('labels', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of lightweight tags'),
    sa.Column('priority', sa.SmallInteger(), nullable=False, comment='Priority: 0=none, 1=low, 2=med, 3=high, 4=urgent'),
    sa.Column('status', sa.String(length=50), nullable=True, comment='Status hint: todo|doing|done|blocked (column is source of truth)'),
    sa.Column('position', sa.Integer(), nullable=False, comment='Order within column'),
    sa.Column('due_at', sa.DateTime(timezone=True), nullable=True, comment='Due date (UTC)'),
    sa.Column('fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Structured, agent-defined per-card fields (limited to 16KB)'),
    sa.Column('links', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Array of {type, url, title} pointing to PRs, docs, etc.'),
    sa.Column('agent_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Agent reasoning and context: reasoning, next_steps, dependencies, estimated_complexity, agent_notes'),
    sa.Column('workflow_state', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Workflow tracking: phase, blockers, progress_percentage, time_spent_minutes, estimated_remaining_minutes'),
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last update timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['column_id'], ['columns.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cards_board_id'), 'cards', ['board_id'], unique=False)
    op.create_index(op.f('ix_cards_column_id'), 'cards', ['column_id'], unique=False)
    op.create_index(op.f('ix_cards_id'), 'cards', ['id'], unique=False)
    op.create_index(op.f('ix_cards_tenant_id'), 'cards', ['tenant_id'], unique=False)
    op.create_table('attachments',
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.Column('card_id', sa.String(length=26), nullable=False, comment='Reference to parent card'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='File name'),
    sa.Column('content_type', sa.String(length=100), nullable=False, comment='MIME content type'),
    sa.Column('size_bytes', sa.BigInteger(), nullable=False, comment='File size in bytes'),
    sa.Column('url', sa.String(length=2048), nullable=False, comment='URL to the file (must be pre-signed or stable)'),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attachments_card_id'), 'attachments', ['card_id'], unique=False)
    op.create_index(op.f('ix_attachments_id'), 'attachments', ['id'], unique=False)
    op.create_index(op.f('ix_attachments_tenant_id'), 'attachments', ['tenant_id'], unique=False)
    op.create_table('comments',
    sa.Column('card_id', sa.String(length=26), nullable=False, comment='Reference to parent card'),
    sa.Column('author', sa.String(length=100), nullable=False, comment='Agent/service/user identifier'),
    sa.Column('body', sa.Text(), nullable=False, comment='Comment content (limited to 8KB as per README)'),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Custom metadata for comment'),
    sa.Column('id', sa.String(length=26), nullable=False),
    sa.Column('tenant_id', sa.String(length=50), nullable=False, comment='Tenant identifier for multi-tenancy support'),
    sa.Column('version', sa.BigInteger(), nullable=False, comment='Version for optimistic concurrency control'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Creation timestamp (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last update timestamp (UTC)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp (UTC), null if not deleted'),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_comments_card_id'), 'comments', ['card_id'], unique=False)
    op.create_index(op.f('ix_comments_id'), 'comments', ['id'], unique=False)
    op.create_index(op.f('ix_comments_tenant_id'), 'comments', ['tenant_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_comments_tenant_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_card_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_attachments_tenant_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_card_id'), table_name='attachments')
    op.drop_table('attachments')
    op.drop_index(op.f('ix_cards_tenant_id'), table_name='cards')
    op.drop_index(op.f('ix_cards_id'), table_name='cards')
    op.drop_index(op.f('ix_cards_column_id'), table_name='cards')
    op.drop_index(op.f('ix_cards_board_id'), table_name='cards')
    op.drop_table('cards')
    op.drop_index(op.f('ix_columns_tenant_id'), table_name='columns')
    op.drop_index(op.f('ix_columns_id'), table_name='columns')
    op.drop_index(op.f('ix_columns_board_id'), table_name='columns')
    op.drop_table('columns')
    op.drop_index(op.f('ix_boards_workspace_id'), table_name='boards')
    op.drop_index(op.f('ix_boards_tenant_id'), table_name='boards')
    op.drop_index(op.f('ix_boards_id'), table_name='boards')
    op.drop_table('boards')
    op.drop_index(op.f('ix_workspaces_tenant_id'), table_name='workspaces')
    op.drop_index(op.f('ix_workspaces_id'), table_name='workspaces')
    op.drop_table('workspaces')
    op.drop_index(op.f('ix_service_tokens_tenant_id'), table_name='service_tokens')
    op.drop_index(op.f('ix_service_tokens_id'), table_name='service_tokens')
    op.drop_table('service_tokens')
    op.drop_index(op.f('ix_audit_events_tenant_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_entity_type'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_entity_id'), table_name='audit_events')
    op.drop_table('audit_events')
    # ### end Alembic commands ###
