2025-08-22 23:55:15,742 - asyncio - DEBUG - Using proactor: IocpProactor
2025-08-22 23:55:15,743 - __main__ - INFO - === Starting Board Update Debug ===
2025-08-22 23:55:16,670 - __main__ - INFO - Imports successful
2025-08-22 23:55:16,670 - __main__ - INFO - Testing board update for ID: AGMNKBN63IPKMVPSFOVVHSPNHA
2025-08-22 23:55:16,671 - __main__ - INFO - Update data: {'name': 'Debug Updated Board', 'description': 'Updated via debug script'}
2025-08-22 23:55:16,671 - __main__ - ERROR - Error in debug function: Database not initialized. Call init_db() first.
2025-08-22 23:55:16,671 - __main__ - ERROR - Full traceback:
Traceback (most recent call last):
  File "F:\Code\AI Agents\KanbanForAgents\debug_board_update.py", line 50, in debug_board_update
    async for session in get_db():
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<84 lines>...
            break  # Exit the async generator
            ^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\app\core\database.py", line 79, in get_db
    raise RuntimeError("Database not initialized. Call init_db() first.")
RuntimeError: Database not initialized. Call init_db() first.
2025-08-22 23:55:16,675 - __main__ - INFO - === Debug Complete ===
2025-08-22 23:55:29,975 - asyncio - DEBUG - Using proactor: IocpProactor
2025-08-22 23:55:29,977 - __main__ - INFO - === Starting Board Update Debug ===
2025-08-22 23:55:30,917 - __main__ - INFO - Imports successful
2025-08-22 23:55:30,918 - __main__ - INFO - Initializing database...
2025-08-22 23:55:30,970 - __main__ - INFO - Database initialized
2025-08-22 23:55:30,970 - __main__ - INFO - Testing board update for ID: AGMNKBN63IPKMVPSFOVVHSPNHA
2025-08-22 23:55:30,971 - __main__ - INFO - Update data: {'name': 'Debug Updated Board', 'description': 'Updated via debug script'}
2025-08-22 23:55:30,971 - __main__ - INFO - Database session obtained
2025-08-22 23:55:30,971 - __main__ - INFO - Repository created
2025-08-22 23:55:30,972 - __main__ - INFO - === Test 1: Getting existing board ===
2025-08-22 23:55:31,096 - __main__ - INFO - Existing board found: Test Board
2025-08-22 23:55:31,097 - __main__ - INFO - Current updated_at: 2025-08-23 03:43:00.314584+00:00
2025-08-22 23:55:31,097 - __main__ - INFO - Current updated_at type: <class 'datetime.datetime'>
2025-08-22 23:55:31,097 - __main__ - INFO - === Test 2: Checking model field ===
2025-08-22 23:55:31,098 - __main__ - INFO - Board model updated_at field: Board.updated_at
2025-08-22 23:55:31,098 - __main__ - INFO - Board model updated_at type: <class 'sqlalchemy.orm.attributes.InstrumentedAttribute'>
2025-08-22 23:55:31,098 - __main__ - INFO - Column: boards.updated_at
2025-08-22 23:55:31,099 - __main__ - INFO - Column default: CallableColumnDefault(<function BaseModel.<lambda> at 0x000001B431C1C860>)
2025-08-22 23:55:31,099 - __main__ - INFO - Column default type: <class 'sqlalchemy.sql.schema.CallableColumnDefault'>
2025-08-22 23:55:31,099 - __main__ - INFO - Column default arg: <function BaseModel.<lambda> at 0x000001B431C1C860>
2025-08-22 23:55:31,100 - __main__ - INFO - Column default arg type: <class 'function'>
2025-08-22 23:55:31,100 - __main__ - INFO - === Test 3: Creating BoardUpdate schema ===
2025-08-22 23:55:31,100 - __main__ - INFO - BoardUpdate created: 
2025-08-22 23:55:31,100 - __main__ - INFO - BoardUpdate dict: {}
2025-08-22 23:55:31,101 - __main__ - INFO - === Test 4: Building update data ===
2025-08-22 23:55:31,101 - __main__ - INFO - Initial data: {}
2025-08-22 23:55:31,101 - __main__ - INFO - Updated_at value to be added: <function BaseModel.<lambda> at 0x000001B431C1C860>
2025-08-22 23:55:31,101 - __main__ - INFO - Updated_at value type: <class 'function'>
2025-08-22 23:55:31,103 - __main__ - INFO - Final data with updated_at: {'updated_at': <function BaseModel.<lambda> at 0x000001B431C1C860>}
2025-08-22 23:55:31,104 - __main__ - INFO - Updated_at value is callable, trying to call it...
2025-08-22 23:55:31,105 - __main__ - ERROR - Error calling updated_at function: BaseModel.<lambda>() missing 1 required positional argument: 'ctx'
2025-08-22 23:55:31,106 - __main__ - INFO - === Test 6: Attempting repository update ===
2025-08-22 23:55:31,110 - __main__ - ERROR - Update failed with error: (sqlalchemy.dialects.postgresql.asyncpg.Error) <class 'asyncpg.exceptions.DataError'>: invalid input for query argument $1: <function BaseModel.<lambda> at 0x000001... (expected a datetime.date or datetime.datetime instance, got 'function')
[SQL: UPDATE boards SET updated_at=$1::TIMESTAMP WITH TIME ZONE WHERE boards.id = $2::VARCHAR AND boards.tenant_id = $3::VARCHAR]
[parameters: (<function BaseModel.<lambda> at 0x000001B431C1C860>, 'AGMNKBN63IPKMVPSFOVVHSPNHA', 'default')]
(Background on this error at: https://sqlalche.me/e/20/dbapi)
2025-08-22 23:55:31,111 - __main__ - ERROR - Full traceback:
Traceback (most recent call last):
  File "asyncpg\\protocol\\prepared_stmt.pyx", line 175, in asyncpg.protocol.protocol.PreparedStatementState._encode_bind_msg
  File "asyncpg\\protocol\\codecs/base.pyx", line 227, in asyncpg.protocol.protocol.Codec.encode
  File "asyncpg\\protocol\\codecs/base.pyx", line 129, in asyncpg.protocol.protocol.Codec.encode_scalar
  File "asyncpg\\pgproto\\./codecs/datetime.pyx", line 208, in asyncpg.pgproto.pgproto.timestamptz_encode
TypeError: expected a datetime.date or datetime.datetime instance, got 'function'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 545, in _prepare_and_execute
    self._rows = deque(await prepared_stmt.fetch(*parameters))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\asyncpg\prepared_stmt.py", line 176, in fetch
    data = await self.__bind_execute(args, 0, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\asyncpg\prepared_stmt.py", line 267, in __bind_execute
    data, status, _ = await self.__do_execute(
                      ^^^^^^^^^^^^^^^^^^^^^^^^
        lambda protocol: protocol.bind_execute(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            self._state, args, '', limit, True, timeout))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\asyncpg\prepared_stmt.py", line 256, in __do_execute
    return await executor(protocol)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "asyncpg\\protocol\\protocol.pyx", line 185, in bind_execute
  File "asyncpg\\protocol\\prepared_stmt.pyx", line 204, in asyncpg.protocol.protocol.PreparedStatementState._encode_bind_msg
asyncpg.exceptions.DataError: invalid input for query argument $1: <function BaseModel.<lambda> at 0x000001... (expected a datetime.date or datetime.datetime instance, got 'function')

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 951, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.dialects.postgresql.asyncpg.AsyncAdapt_asyncpg_dbapi.Error: <class 'asyncpg.exceptions.DataError'>: invalid input for query argument $1: <function BaseModel.<lambda> at 0x000001... (expected a datetime.date or datetime.datetime instance, got 'function')

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "F:\Code\AI Agents\KanbanForAgents\debug_board_update.py", line 121, in debug_board_update
    updated_board = await repo.update(
                    ^^^^^^^^^^^^^^^^^^
    ...<4 lines>...
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\app\repositories\base.py", line 218, in update
    result = await self.session.execute(update_query.values(**data))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\ext\asyncio\session.py", line 463, in execute
    result = await greenlet_spawn(
             ^^^^^^^^^^^^^^^^^^^^^
    ...<6 lines>...
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 201, in greenlet_spawn
    result = context.throw(*sys.exc_info())
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ~~~~~~~~~~~~~~~~~~~~~~^
        statement,
        ^^^^^^^^^^
    ...<4 lines>...
        _add_event=_add_event,
        ^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self,
        ^^^^^
    ...<4 lines>...
        conn,
        ^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\orm\bulk_persistence.py", line 1660, in orm_execute_statement
    return super().orm_execute_statement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        session,
        ^^^^^^^^
    ...<4 lines>...
        conn,
        ^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\orm\context.py", line 306, in orm_execute_statement
    result = conn.execute(
        statement, params or {}, execution_options=execution_options
    )
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1419, in execute
    return meth(
        self,
        distilled_parameters,
        execution_options or NO_OPTIONS,
    )
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 526, in _execute_on_connection
    return connection._execute_clauseelement(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self, distilled_params, execution_options
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1641, in _execute_clauseelement
    ret = self._execute_context(
        dialect,
    ...<8 lines>...
        cache_hit=cache_hit,
    )
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1846, in _execute_context
    return self._exec_single_context(
           ~~~~~~~~~~~~~~~~~~~~~~~~~^
        dialect, context, statement, parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1986, in _exec_single_context
    self._handle_dbapi_exception(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        e, str_statement, effective_parameters, cursor, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2355, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1967, in _exec_single_context
    self.dialect.do_execute(
    ~~~~~~~~~~~~~~~~~~~~~~~^
        cursor, str_statement, effective_parameters, context
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 951, in do_execute
    cursor.execute(statement, parameters)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 580, in execute
    self._adapt_connection.await_(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._prepare_and_execute(operation, parameters)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 132, in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
           ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\util\_concurrency_py3k.py", line 196, in greenlet_spawn
    value = await result
            ^^^^^^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 558, in _prepare_and_execute
    self._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 508, in _handle_exception
    self._adapt_connection._handle_exception(error)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "F:\Code\AI Agents\KanbanForAgents\venv\Lib\site-packages\sqlalchemy\dialects\postgresql\asyncpg.py", line 792, in _handle_exception
    raise translated_error from error
sqlalchemy.exc.DBAPIError: (sqlalchemy.dialects.postgresql.asyncpg.Error) <class 'asyncpg.exceptions.DataError'>: invalid input for query argument $1: <function BaseModel.<lambda> at 0x000001... (expected a datetime.date or datetime.datetime instance, got 'function')
[SQL: UPDATE boards SET updated_at=$1::TIMESTAMP WITH TIME ZONE WHERE boards.id = $2::VARCHAR AND boards.tenant_id = $3::VARCHAR]
[parameters: (<function BaseModel.<lambda> at 0x000001B431C1C860>, 'AGMNKBN63IPKMVPSFOVVHSPNHA', 'default')]
(Background on this error at: https://sqlalche.me/e/20/dbapi)
2025-08-22 23:55:31,144 - __main__ - INFO - === Debug Complete ===
2025-08-22 23:56:07,341 - asyncio - DEBUG - Using proactor: IocpProactor
2025-08-22 23:56:07,343 - __main__ - INFO - === Starting Board Update Debug ===
2025-08-22 23:56:08,148 - __main__ - INFO - Imports successful
2025-08-22 23:56:08,148 - __main__ - INFO - Initializing database...
2025-08-22 23:56:08,198 - __main__ - INFO - Database initialized
2025-08-22 23:56:08,199 - __main__ - INFO - Testing board update for ID: AGMNKBN63IPKMVPSFOVVHSPNHA
2025-08-22 23:56:08,199 - __main__ - INFO - Update data: {'name': 'Debug Updated Board', 'description': 'Updated via debug script'}
2025-08-22 23:56:08,199 - __main__ - INFO - Database session obtained
2025-08-22 23:56:08,199 - __main__ - INFO - Repository created
2025-08-22 23:56:08,200 - __main__ - INFO - === Test 1: Getting existing board ===
2025-08-22 23:56:08,320 - __main__ - INFO - Existing board found: Test Board
2025-08-22 23:56:08,320 - __main__ - INFO - Current updated_at: 2025-08-23 03:43:00.314584+00:00
2025-08-22 23:56:08,320 - __main__ - INFO - Current updated_at type: <class 'datetime.datetime'>
2025-08-22 23:56:08,321 - __main__ - INFO - === Test 2: Checking model field ===
2025-08-22 23:56:08,321 - __main__ - INFO - Board model updated_at field: Board.updated_at
2025-08-22 23:56:08,321 - __main__ - INFO - Board model updated_at type: <class 'sqlalchemy.orm.attributes.InstrumentedAttribute'>
2025-08-22 23:56:08,322 - __main__ - INFO - Column: boards.updated_at
2025-08-22 23:56:08,322 - __main__ - INFO - Column default: CallableColumnDefault(<function BaseModel.<lambda> at 0x00000267C7AEC860>)
2025-08-22 23:56:08,322 - __main__ - INFO - Column default type: <class 'sqlalchemy.sql.schema.CallableColumnDefault'>
2025-08-22 23:56:08,323 - __main__ - INFO - Column default arg: <function BaseModel.<lambda> at 0x00000267C7AEC860>
2025-08-22 23:56:08,323 - __main__ - INFO - Column default arg type: <class 'function'>
2025-08-22 23:56:08,323 - __main__ - INFO - === Test 3: Creating BoardUpdate schema ===
2025-08-22 23:56:08,323 - __main__ - INFO - BoardUpdate created: 
2025-08-22 23:56:08,324 - __main__ - INFO - BoardUpdate dict: {}
2025-08-22 23:56:08,324 - __main__ - INFO - === Test 4: Building update data ===
2025-08-22 23:56:08,324 - __main__ - INFO - Initial data: {}
2025-08-22 23:56:08,324 - __main__ - INFO - Updated_at value to be added: <function BaseModel.<lambda> at 0x00000267C7AEC860>
2025-08-22 23:56:08,324 - __main__ - INFO - Updated_at value type: <class 'function'>
2025-08-22 23:56:08,325 - __main__ - INFO - Final data with updated_at: {'updated_at': <function BaseModel.<lambda> at 0x00000267C7AEC860>}
2025-08-22 23:56:08,325 - __main__ - INFO - Updated_at value is callable, trying to call it...
2025-08-22 23:56:08,325 - __main__ - ERROR - Error calling updated_at function: BaseModel.<lambda>() missing 1 required positional argument: 'ctx'
2025-08-22 23:56:08,325 - __main__ - INFO - === Test 6: Attempting repository update ===
2025-08-22 23:56:08,346 - __main__ - INFO - Update successful! New name: Test Board
2025-08-22 23:56:08,347 - __main__ - INFO - New updated_at: 2025-08-23 03:56:08.326455+00:00
2025-08-22 23:56:08,347 - __main__ - INFO - === Debug Complete ===
