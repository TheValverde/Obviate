version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kanban-postgres
    environment:
      POSTGRES_DB: kanban_dev
      POSTGRES_USER: kanban_user
      POSTGRES_PASSWORD: kanban_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "12001:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - kanban-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kanban_user -d kanban_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Test PostgreSQL Database
  postgres-test:
    image: postgres:15-alpine
    container_name: kanban-postgres-test
    environment:
      POSTGRES_DB: kanban_test
      POSTGRES_USER: kanban_user
      POSTGRES_PASSWORD: kanban_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "12002:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - kanban-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kanban_user -d kanban_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: kanban-app
    environment:
      - DATABASE_URL=postgresql+asyncpg://kanban_user:kanban_password@postgres:5432/kanban_dev
      - DEBUG=true
      - ENVIRONMENT=development
    ports:
      - "12003:8000"
    volumes:
      - .:/app
      - /app/.venv
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kanban-network
    command: [".venv/bin/uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: kanban-redis
    ports:
      - "12004:6379"
    volumes:
      - redis_data:/data
    networks:
      - kanban-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local

networks:
  kanban-network:
    driver: bridge
